type Exercise {
  id: ID!
  exercise: Int!
  deps: Int
}

type ExerciseHistoryData {
  id: ID!
  year: Int!
  month: Int!
  date: Int!
  type: String!
  exercise: Int!
  cnt: Int!
  hasDone: Int!
  weights: String!
  repeats: String!
  weightUnit: String!
}


type Query {
  getExerciseListByIds(ids: [ID!]): [Exercise!]
  getExerciseById(id: ID): Exercise
  getExerciseListByScheduleId(scheduleId: ID): [Exercise!]
  getExerciseListByExercisePresetId(exercisePresetId: ID): [Exercise!]
  getExerciseFinishHistory(exerciseId: ID): [ExerciseHistoryData!]
}

input CreateExerciseByScheduleInput {
  scheduleId: Int!
  exerciseId: [Int!]
}
input CreateExerciseByExercisePresetInput {
  exercisePresetId: Int!
  exerciseId: [Int!]
}

input UpdateExerciseInput {
  id: String!
  exerciseId: Int!
}

type Mutation {
  createExerciseBySchedule(exercise: CreateExerciseByScheduleInput): Exercise
  createExerciseByExercisePreset(exercise: CreateExerciseByExercisePresetInput): Exercise

  updateExercise(exercise: UpdateExerciseInput): Exercise
  updateExerciseListByScheduleId(scheduleId: Int, newExercise: [Int!], deleteExerciseId: [Int!]): [Exercise]
  updateExerciseListByExercisePresetId(exercisePresetId: Int, newExercise: [Int!], deleteExerciseId: [Int!]): [Exercise]

  deleteExerciseById(id: ID): String
}